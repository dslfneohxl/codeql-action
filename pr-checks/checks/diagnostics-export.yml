name: "Diagnostic export"
description: "Tests that a manually added diagnostic is exported to SARIF."
versions: ["latest", "nightly-latest"]
env:
  CODEQL_ACTION_EXPORT_DIAGNOSTICS: true
steps:
  - uses: ./../action/init
    id: init
    with:
      languages: javascript
      queries: security-extended
      tools: ${{ steps.prepare-test.outputs.tools-url }}
  - name: Manually add a diagnostic
    shell: bash
    env:
      CODEQL_PATH: ${{ steps.init.outputs.codeql-path }}
    run: |
      "$CODEQL_PATH" database add-diagnostic "$RUNNER_TEMP/codeql_databases/javascript" --plaintext-message="Plaintext message" --source-id="lang/diagnostics/example" --source-name="Diagnostic name"
  - uses: ./../action/analyze
    with:
      output: "${{ runner.temp }}/results"
      upload-database: false
  - name: Upload SARIF
    uses: actions/upload-artifact@v3
    with:
      name: diagnostics-export-${{ matrix.os }}-${{ matrix.version }}.sarif.json
      path: "${{ runner.temp }}/results/javascript.sarif"
      retention-days: 7
  - name: Check diagnostics appear in SARIF
    uses: actions/github-script@v6
    env:
      SARIF_PATH: "${{ runner.temp }}/results/javascript.sarif"
    with:
      script: |
        const fs = require('fs');

        const sarif = JSON.parse(fs.readFileSync(process.env['SARIF_PATH'], 'utf8'));
        const run = sarif.runs[0];

        const toolExecutionNotifications = run.invocations[0].toolExecutionNotifications;
        let foundDiagnosticToolExecutionNotification = false;
        for (toolExecutionNotification of toolExecutionNotifications) {
          if (toolExecutionNotification.descriptor.id === 'lang/diagnostics/example' && toolExecutionNotification.message.text === 'Plaintext message') {
            foundDiagnosticToolExecutionNotification = true; 
            break;
          }
        };
        if (foundDiagnosticToolExecutionNotification === false) {
          core.setFailed('An entry for this diagnostic was not found in the `runs[].invocations[].toolExecutionNotifications` SARIF property');
        }

        const notifications = run.tool.driver.notifications;
        let foundDiagnosticNotification = false;
        for (notification of notifications) {
          if (notification.id === 'lang/diagnostics/example' && notification.name === 'lang/diagnostics/example' && notification.fullDescription.text && 'Diagnostic name') {
            foundDiagnosticNotification = true;
            break;
          }
        }
        if (foundDiagnosticNotification === false) {
          core.setFailed('An entry for this diagnostic was not found in the `runs[].tool.driver.notifications[]` SARIF property.');
        }

        core.info('Finished diagnostic export test');